#!/usr/bin/env python
#############################################
# Locker for Linux
# By Tomas Pollak - (c) 2010 Fork Ltd.
# GPLv3 Licence
#############################################

import os, sys
# import getopt
import hashlib
import gobject
import gtk
import pango

# import wnck

from threading import Timer
import time
from time import sleep


class Lock:
	def get_md5(self, string):
		return hashlib.md5(string).hexdigest()

	def enter_callback(self, widget, entry):
		hashed_text = self.get_md5(entry.get_text())
		# print hashed_text

		if hashed_text != passwd:
			print " -- Bad password attempt."
			return True
		else:
			print ' -- Correctomondo. PC Unlocked.'
			os._exit(0)
		# print "Entry contents: %s\n" % entry_text

	def on_delete_event(self, widget, event):
		return True
		# self.window.set_keep_above(True)

	def callback(self, widget, data=None):
		print "Hello again - %s was pressed" % data

	def on_focus_change(self, widget, event):
		print " -- Focus changed."
		return True

	def on_key_press(self, widget, event):
		keyname = gtk.gdk.keyval_name(event.keyval)
		# print "Key %s (%d) was pressed" % (keyname, event.keyval)
		if event.state & gtk.gdk.CONTROL_MASK:
			print "Control was being held down"
		if event.state & gtk.gdk.MOD1_MASK:
			print "Alt was being held down"
		if event.state & gtk.gdk.SHIFT_MASK:
			print "Shift was being held down"

	def on_window_state_change(self, widget, event):
		self.window.activate_focus()
		print "Something happened"
		return False

	def __init__(self):
		###################################
		# window
		###################################

		self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
		self.window.set_title("Prey Lock")

		# dont know what the hell this is for
		# self.window.set_mnemonic_modifier(gtk.gdk.CONTROL_MASK)

		# prevents window from being closed
		self.window.connect("delete_event", self.on_delete_event)
		# capture keypresses
		self.window.connect("key_press_event", self.on_key_press)

		# self.window.connect("window_state_event", self.on_window_state_change)

		# window and management settings
		self.window.stick()
		# self.window.set_role("toolbox")

		# self.window.set_type_hint(gtk.gdk.WINDOW_TYPE_HINT_DOCK)

		# print self.window.flags()
		# self.window.set_flags(gtk.CAN_FOCUS | gtk.HAS_FOCUS | gtk.HAS_GRAB | gtk.RECEIVES_DEFAULT | gtk.TOPLEVEL)
		# print self.window.flags()

		self.window.set_deletable(False)
		# self.window.set_focus_on_map(True)
		# self.window.set_decorated(False)
		self.window.set_border_width(0)
		self.window.set_keep_above(True)

		# calculate number of screens
		width = gtk.gdk.screen_width()
		height = gtk.gdk.screen_height()

		monitors = self.window.get_screen().get_n_monitors()

		if monitors == 2:
			middle = width/4
		else:
			middle = width/2
		# 	self.window.set_type_hint(gtk.gdk.WINDOW_TYPE_HINT_TOOLBAR)
		# 	self.window.resize(width, height)

		# middle = width/2
		self.window.fullscreen()

		# self.window.set_resizable(False)

		vbox = gtk.VBox(False, 0)
		self.window.add(vbox)
		vbox.show()

		###################################
		# background color and image
		###################################

		bgcolor = gtk.gdk.color_parse("black")
		self.window.modify_bg(gtk.STATE_NORMAL, bgcolor)

		image = gtk.Image()
		script_path = sys.path[0]
		bg_path = script_path + "/../../lib/bg-lock-with-input.png"
		image.set_from_file(bg_path)
		image.show()
		vbox.add(image)

		###################################
		# label
		###################################

		# text = 'This device has been locked.'
		# label = gtk.Label()
		# label.set_markup('<span foreground="#fff">'+text+'</span>');
		# label.modify_font(pango.FontDescription("sans 70"))

		# vbox.pack_start(label, True, True, 0)
		# label.show()

		hbox = gtk.HBox(False, 0)
		vbox.add(hbox)
		hbox.show()

		self.entry = gtk.Entry(max=0)
		self.entry.set_max_length(40)

		# self.entry.set_flags(gtk.CAN_FOCUS)
		# self.entry.set_text("type password")
		self.entry.set_inner_border(None)
		self.entry.set_width_chars(32)
		self.entry.set_visibility(False)
		self.entry.set_has_frame(False)
		self.entry.modify_font(pango.FontDescription("sans 20"))

		self.entry.set_flags(gtk.CAN_FOCUS | gtk.HAS_FOCUS | gtk.HAS_GRAB | gtk.CAN_DEFAULT | gtk.SENSITIVE)

		self.entry.connect("activate", self.enter_callback, self.entry)

		# self.entry.grab_focus()
		# self.entry.set_editable(True)
		# self.entry.set_sensitive(True)
		# self.entry.realize()

		# hbox.pack_start(self.entry, True, True, 500)

		self.entry.show()

		fixed = gtk.Fixed()
		fixed.put(self.entry, middle-240, -(height/2)+18)
		fixed.show()
		hbox.pack_start(fixed, False, False, 30)

		# self.window.set_focus(self.entry)

		# vbox.add(fixed)

#		vbox = gtk.VBox(False, 0)
#		hbox.add(vbox)
#		vbox.show()

#		text = 'Invalid password. Access denied.'
#		label = gtk.Label()
#		label.set_markup('<span foreground="#aa0000">'+text+'</span>');
#		label.modify_font(pango.FontDescription("sans 20"))
#		vbox.pack_start(label, True, True, 0)
#		label.show()

		self.window.show_all()
		gtk.gdk.keyboard_grab(fixed.window, True)
		# gtk.gdk.event_handler_set(self.handle_event)

def keep_focus():
	screen = wnck.screen_get_default()
	while True:
		sleep(1)
		for window in screen.get_windows():
			if window.get_name().startswith('Prey Lock'):
				window.activate(gtk.get_current_event_time())

		# lock.window.grab_focus()

if __name__ == "__main__":

	if len(sys.argv) < 2:
		passwd = 'e75f0173be748b6f68b3feb61255693c' # preyrocks
		# print 'No password specified.'
		# os._exit(1)
	else:
		passwd = sys.argv[1]

	lock = Lock()

	gobject.threads_init()

	gtk.gdk.threads_init()
	gtk.gdk.threads_enter()

	# Timer(1, keep_focus).start()
	gtk.main()

	gtk.gdk.threads_leave()
